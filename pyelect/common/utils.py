"""Project-wide helper functions."""

import logging
import os


_log = logging.getLogger()

FILE_MANUAL = 'manual'
FILE_AUTO_GENERATED = 'auto_generated'
FILE_AUTO_UPDATED = 'auto_updated'

FILE_TYPES = (FILE_MANUAL, FILE_AUTO_UPDATED, FILE_AUTO_GENERATED)

DIR_PRE_DATA = 'pre_data'

FILE_TYPE_COMMENTS = {
    FILE_AUTO_UPDATED:
        "WARNING: this file is auto-updated. Any YAML comments will be deleted.",
    FILE_AUTO_GENERATED:
        "WARNING: this file is auto-generated. Do not edit this file!",
}


_SINGULAR_TO_PLURAL = {
    'body': 'bodies',
    'category': 'categories',
}

_PLURAL_TO_SINGULAR = {p: s for s, p in _SINGULAR_TO_PLURAL.items()}


def type_name_to_plural(singular):
    """Return the node name given an object type name.

    For example, "body" yields "bodies".
    """
    try:
        plural = _SINGULAR_TO_PLURAL[singular]
    except KeyError:
        plural = "{0}s".format(singular)
    return plural


def type_name_to_singular(plural):
    try:
        singular = _PLURAL_TO_SINGULAR[plural]
    except KeyError:
        singular = plural[:-1]
    return singular


def filter_dict_by_keys(data, keys):
    return {k: v for k, v in data.items() if k in keys}


def get_required(dict_, key, message=None):
    try:
        value = dict_[key]
    except:
        raise Exception("error getting key {0!r} from: {1!r} message={2}"
                        .format(key, dict_, message))
    return value


def get_repo_dir():
    repo_dir = os.path.join(os.path.dirname(__file__), os.pardir, os.pardir)
    return os.path.abspath(repo_dir)


def get_pre_data_dir():
    repo_dir = get_repo_dir()
    dir_path = os.path.join(repo_dir, DIR_PRE_DATA)
    return dir_path


def write(path, text):
    _log.info("writing to: {0}".format(path))
    with open(path, mode='w') as f:
        f.write(text)
